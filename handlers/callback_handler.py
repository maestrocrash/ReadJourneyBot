from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
from notion.update_book import update_book_in_notion
from notion.create_book import create_book_in_notion
from keyboards.inline_keyboard import build_book_buttons
from utils.parsing import get_year, get_title

async def callback_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    books = context.user_data.get("all_books", [])

    if data.startswith("year_"):
        year = data.split("_", 1)[1]
        filtered = [b for b in books if year in get_year(b)]
        count = len(filtered)
        keyboard = build_book_buttons(filtered)
        await query.edit_message_text(
            text=f"–ö–Ω–∏–≥–∏ –∑–∞ {year} –≥–æ–¥: –≤—Å–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {count} –∫–Ω–∏–≥.",
            reply_markup=keyboard
        )
        return

    if data.startswith("book_"):
        book_id = data.split("_", 1)[1]
        book = next((b for b in books if b['id'] == book_id), None)
        if not book:
            await query.edit_message_text("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        status = book['properties'].get("Status", {}).get("select", {}).get("name", "")

        if status == "Not started":
            today = datetime.now().strftime("%Y-%m-%d")
            updated = await update_book_in_notion(book_id, {
                "Status": {"select": {"name": "In progress"}},
                "Date start": {"date": {"start": today}}
            })
            if updated:
                await query.edit_message_text("üìö –ö–Ω–∏–≥–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å ¬´–í –ø—Ä–æ—Ü–µ—Å—Å–µ¬ª.")
            else:
                await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏.")
            return

        if status == "In progress":
            today = datetime.now().strftime("%Y-%m-%d")
            updated = await update_book_in_notion(book_id, {
                "Status": {"select": {"name": "Done"}},
                "Date finished": {"date": {"start": today}}
            })
            if updated:
                context.user_data["selected_book_id"] = book_id
                context.user_data["state"] = "awaiting_rating"
                await query.edit_message_text(
                    "üìö –ö–Ω–∏–≥–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 10):"
                )
            else:
                await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏.")
            return

        # –î–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏
        title = get_title(book)
        author = book['properties'].get('Author', {}).get('select', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        score = book['properties'].get('Score', {}).get('select', {}).get('name', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
        comments_list = book['properties'].get('Comments', {}).get('rich_text', [])
        comments = "".join([c['plain_text'] for c in comments_list])
        years = [y['name'] for y in book['properties'].get('–ì–æ–¥', {}).get('multi_select', [])]
        year_str = ", ".join(years)

        msg = (
            f"üìö <b>{title}</b>\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {score}\n"
            f"üìÖ –ì–æ–¥: {year_str}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comments}"
        )
        await query.edit_message_text(msg, parse_mode="HTML")
        return

    if data.startswith("author_"):
        author = data[len("author_"):]  # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ callback_data
        context.user_data["selected_author"] = author

        if context.user_data.get("state") == "awaiting_new_book_author":
            title = context.user_data.get("new_book_title")
            year = datetime.now().year

            success = await create_book_in_notion(
                title=title,
                author=author,
                status="Not started",
                year=year
            )

            context.user_data.clear()

            if success:
                await query.edit_message_text(f"–ö–Ω–∏–≥–∞ ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
            else:
                await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
            await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ—Ä: {author}")
        return
